name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.22'
  BINARY_NAME: open_tool_speex

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libspeexdsp-dev pkg-config

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Task
      shell: bash
      run: |
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Download Task binary directly for Windows
          curl -L https://github.com/go-task/task/releases/download/v3.35.0/task_windows_amd64.zip -o task.zip
          unzip -o task.zip
          chmod +x task.exe
          # Add to PATH for current session
          echo "$PWD" >> $GITHUB_PATH
          # Copy to a location in PATH
          cp task.exe /usr/local/bin/task || cp task.exe /usr/bin/task || cp task.exe /bin/task
        else
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
        fi

    - name: Run tests
      shell: bash
      run: |
        pwd
        ls -la
        task test

    - name: Run tests with coverage
      run: task test-coverage

    - name: Run linting
      run: task lint

    - name: Run vet
      run: task vet

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: test
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: open_tool_speex-linux
          - os: macos-latest
            platform: macos
            artifact_name: open_tool_speex-macos
          - os: windows-latest
            platform: windows
            artifact_name: open_tool_speex.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libspeexdsp-dev pkg-config

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install speexdsp pkg-config
        # Verify installation
        pkg-config --cflags speexdsp
        pkg-config --libs speexdsp

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install pkg-config for Windows
        choco install pkgconfiglite -y
        # Add pkg-config to PATH
        echo "C:\ProgramData\chocolatey\lib\pkgconfiglite\tools\bin" >> $GITHUB_PATH
        # Install MSYS2 for development tools
        choco install msys2 -y
        # Install vcpkg manually
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        cd C:\vcpkg
        .\bootstrap-vcpkg.bat
        # Add vcpkg to PATH
        echo "C:\vcpkg" >> $GITHUB_PATH

    - name: Install Task
      shell: bash
      run: |
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Download Task binary directly for Windows
          curl -L https://github.com/go-task/task/releases/download/v3.35.0/task_windows_amd64.zip -o task.zip
          unzip -o task.zip
          chmod +x task.exe
          # Add to PATH for current session
          echo "$PWD" >> $GITHUB_PATH
          # Copy to a location in PATH
          cp task.exe /usr/local/bin/task || cp task.exe /usr/bin/task || cp task.exe /bin/task
        else
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
        fi

    - name: Build
      shell: bash
      run: |
        pwd
        if [ "$RUNNER_OS" = "Windows" ]; then
          ls -la
          find . -name "*.go" -type f
          ls -la cmd/
          # Check if pkg-config is available
          which pkg-config || echo "pkg-config not found"
          # Install SpeexDSP via vcpkg
          vcpkg install speexdsp:x64-windows
          # Set environment variables for Windows CGO
          export PKG_CONFIG_PATH="/c/vcpkg/installed/x64-windows/lib/pkgconfig"
          export CGO_ENABLED=1
          export CGO_CFLAGS="-I/c/vcpkg/installed/x64-windows/include"
          export CGO_LDFLAGS="-L/c/vcpkg/installed/x64-windows/lib"
          # Try to find pkg-config in common locations
          if [ -f "/c/ProgramData/chocolatey/lib/pkgconfiglite/tools/bin/pkg-config.exe" ]; then
            export PATH="/c/ProgramData/chocolatey/lib/pkgconfiglite/tools/bin:$PATH"
          fi
        else
          ls -la
          find . -name "*.go" -type f
          ls -la cmd/
        fi
        if [ "$RUNNER_OS" = "Windows" ]; then
          task build-windows
        elif [ "$RUNNER_OS" = "macOS" ]; then
          # Set environment variables for macOS CGO
          export CGO_ENABLED=1
          export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig"
          # Detect architecture and build accordingly
          if [ "$(uname -m)" = "arm64" ]; then
            task build-macos-arm64
          else
            task build-macos
          fi
        else
          # Set environment variables for Linux CGO
          export CGO_ENABLED=1
          task build-linux
        fi

    - name: Verify build
      shell: bash
      run: |
        if [ "$RUNNER_OS" = "Windows" ] && [ -f "build/open_tool_speex.exe" ]; then
          echo "Windows build successful"
          ls -la build/
        elif [ "$RUNNER_OS" = "macOS" ] && [ -f "build/open_tool_speex-macos" ]; then
          echo "macOS x86_64 build successful"
          ls -la build/
        elif [ "$RUNNER_OS" = "macOS" ] && [ -f "build/open_tool_speex-macos-arm64" ]; then
          echo "macOS ARM64 build successful"
          ls -la build/
        elif [ "$RUNNER_OS" = "Linux" ] && [ -f "build/open_tool_speex-linux" ]; then
          echo "Linux build successful"
          ls -la build/
        else
          echo "Build failed, no binary found for $RUNNER_OS"
          ls -la build/
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: build/${{ env.BINARY_NAME }}*

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libspeexdsp-dev pkg-config

    - name: Install Task
      shell: bash
      run: |
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Download Task binary directly for Windows
          curl -L https://github.com/go-task/task/releases/download/v3.35.0/task_windows_amd64.zip -o task.zip
          unzip -o task.zip
          chmod +x task.exe
          # Add to PATH for current session
          echo "$PWD" >> $GITHUB_PATH
          # Copy to a location in PATH
          cp task.exe /usr/local/bin/task || cp task.exe /usr/bin/task || cp task.exe /bin/task
        else
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
        fi

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: open_tool_speex-linux

    - name: Check downloaded artifacts
      run: |
        echo "Checking downloaded artifacts:"
        find . -name "open_tool_speex*" -type f
        ls -la

    - name: Make binary executable
      run: |
        # Create build directory if it doesn't exist
        mkdir -p build
        # Check if binary exists
        if [ -f "build/open_tool_speex-linux" ]; then
          chmod +x build/open_tool_speex-linux
          echo "Binary made executable successfully"
        else
          echo "Binary not found, checking build directory:"
          ls -la build/ || echo "Build directory does not exist"
          echo "Build failed, binary was not created"
          exit 1
        fi

    - name: Run integration tests
      run: task test-integration

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libspeexdsp-dev pkg-config

    - name: Run basic security checks
      run: |
        go vet ./...
        if [ -n "$(gofmt -s -l .)" ]; then
          echo "Code is not formatted. Run 'go fmt ./...' to fix."
          gofmt -s -l .
          exit 1
        fi

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libspeexdsp-dev pkg-config

    - name: Run dependency check
      run: |
        go mod download
        go mod verify
        go list -m all
